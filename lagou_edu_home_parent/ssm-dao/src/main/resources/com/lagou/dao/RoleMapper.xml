<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lagou.dao.RoleMapper">

    <!-- 1.根据角色名称查询角色列表信息 -->
    <select id="findAllRole" parameterType="com.lagou.domain.Role" resultType="com.lagou.domain.Role">
        select * from roles
        <where>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
        </where>
    </select>

    <!-- 2.根据角色ID查询角色所关联的菜单信息 -->
    <select id="findMenuByRoleId" resultType="int" parameterType="int">
        SELECT m.id
           FROM roles r INNER JOIN role_menu_relation rm ON r.id = rm.role_id
             INNER JOIN menu m ON m.id = rm.menu_id WHERE r.id = #{id}
    </select>

    <!-- 3.1 根据roleId来清空中间表的关联关系(role_menu_relation) -->
    <delete id="deleteRoleContextMenu" parameterType="int">
        delete from role_menu_relation where role_id = #{rid}
    </delete>

    <!-- 3.2 为角色分配菜单信息 -->
    <insert id="roleContextMenu" parameterType="com.lagou.domain.Role_menu_relation">
        insert into role_menu_relation values(null,#{menuId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedby})
    </insert>

    <!-- 4.删除角色 -->
    <delete id="deleteRole" parameterType="int">
        delete from roles where id = #{id}
    </delete>

    <!-- 5.添加角色 -->
    <insert id="saveRole" parameterType="com.lagou.domain.Role">
        insert into roles values(null,#{code},#{name},#{description},#{createdTime},#{updatedTime},#{createdBy},#{updatedBy})
    </insert>

    <!-- 6.根据roleId回显角色信息 -->
    <select id="findRoleById" parameterType="int" resultType="com.lagou.domain.Role">
        select id,code,name,description from roles where id = #{id}
    </select>

    <!-- 7.更新角色 -->
    <update id="updateRole" parameterType="com.lagou.domain.Role">
        update roles
        <trim prefix="SET" suffixOverrides=",">
            <if test="code != null and code != ''">
                code = #{code},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime},
            </if>
            <if test="updatedBy != null and updatedBy != ''">
                updated_by = #{updatedBy},
            </if>
        </trim>
        <where>
            <if test="id != null and id != ''">
                id = #{id}
            </if>
        </where>
    </update>

    <!-- 8.1 根据角色id查询角色所关联的资源分类信息 -->
    <select id="findResourceCategoryListByRoleId" parameterType="int" resultType="com.lagou.domain.ResourceCategory">
          SELECT DISTINCT rc.*
          FROM resource_category rc INNER JOIN resource re ON rc.id = re.category_id
                          INNER JOIN role_resource_relation rrr ON re.id = rrr.resource_id
                          INNER JOIN roles ro ON ro.id = rrr.role_id
          WHERE ro.id = #{rid}
    </select>

    <!-- 8.2 根据角色id查询角色所关联的资源信息 -->
    <select id="findResourceListByRoleId" parameterType="int" resultType="com.lagou.domain.Resource">
        SELECT DISTINCT re.*
        FROM resource re INNER JOIN role_resource_relation rr ON re.id = rr.resource_id
                 INNER JOIN roles r ON r.id = rr.role_id
        WHERE r.id = #{rid}
    </select>

    <!-- 9.1 根据roleId清空中间表的关联关系（role_resource_relation） -->
    <delete id="deleteRoleContextResource" parameterType="int">
          DELETE FROM role_resource_relation WHERE role_id = #{rid}
    </delete>

    <!-- 9.2 为角色分配资源信息 -->
    <select id="roleContextResource" parameterType="com.lagou.domain.Role_resource_relation">
        insert into role_resource_relation values(null,#{resourceId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedBy})
    </select>

</mapper>